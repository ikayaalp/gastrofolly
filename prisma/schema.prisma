// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js modelleri
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Kullanıcı modeli
model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  image                 String?
  password              String?   // Hashlenmiş şifre
  firebaseUid           String?   @unique // Firebase Authentication UID
  verificationCode      String?   // 6 haneli doğrulama kodu
  verificationCodeExpiry DateTime? // Kodun geçerlilik süresi
  resetToken            String?   // Şifre sıfırlama token
  resetTokenExpiry      DateTime? // Token geçerlilik süresi
  role                  UserRole  @default(STUDENT)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  reviews       Review[]
  progress      Progress[]
  createdCourses Course[] @relation("CourseInstructor")
  payments      Payment[]
  topics        Topic[]
  posts         Post[]
  topicLikes    TopicLike[]
  postLikes     PostLike[]
  messages      Message[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

// Kategori modeli
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]
}

// Kurs modeli
model Course {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  isFree      Boolean     @default(false)
  discountRate Float?     // İndirim oranı (0-100 arası)
  discountedPrice Float?  // İndirimli fiyat (otomatik hesaplanır)
  imageUrl    String?
  level       CourseLevel @default(BEGINNER)
  duration    Int? // dakika cinsinden
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  instructorId String
  instructor   User     @relation("CourseInstructor", fields: [instructorId], references: [id])
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])

  lessons     Lesson[]
  enrollments Enrollment[]
  reviews     Review[]
  progress    Progress[]
  payments    Payment[]
  messages    Message[]
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// Ders modeli
model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  duration    Int? // dakika cinsinden
  order       Int
  isFree      Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  progress Progress[]
}

// Kayıt modeli
model Enrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

// İlerleme modeli
model Progress {
  id          String   @id @default(cuid())
  isCompleted Boolean  @default(false)
  watchedAt   DateTime @default(now())

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

// Değerlendirme modeli
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

// Ödeme modeli
model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("TRY")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Forum Kategori modeli
model ForumCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  color       String?  @default("#f97316")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  topics Topic[]
}

// Forum Başlık modeli
model Topic {
  id          String   @id @default(cuid())
  title       String
  content     String
  slug        String   @unique
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId   String
  author     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String
  category   ForumCategory @relation(fields: [categoryId], references: [id])

  posts Post[]
  likes TopicLike[]
}

// Forum Beğeni modeli
model TopicLike {
  id      String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
}

// Forum Mesaj modeli
model Post {
  id        String   @id @default(cuid())
  content   String
  likeCount Int      @default(0)
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  topicId  String
  topic    Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  parent   Post?   @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Post[]  @relation("PostReplies")
  likes    PostLike[]
}

// Forum Yorum Beğeni modeli
model PostLike {
  id      String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

// Mesaj modeli (Eğitmen-Öğrenci iletişimi)
model Message {
  id        String   @id @default(cuid())
  content   String
  parentId  String?  // Yanıt mesajı için
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  parent   Message? @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Message[] @relation("MessageReplies")
}
